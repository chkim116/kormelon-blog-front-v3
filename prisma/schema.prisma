// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"

  // vercel 배포 설정
  // https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-vercel
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}


enum userRole {
  admin
  member
	@@map("userRole")
}

model Category {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  deletedAt    DateTime?     
  value        String         @db.VarChar(255)
  ordering     Int            @default(0)
  post         Post[]
  subCategory SubCategory[]
	@@map("category")
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?
  value      String    @db.VarChar(255)
  ordering   Int       @default(0)
  categoryId Int
  post       Post[]
  category   Category  @relation(fields: [categoryId], references: [id])

	@@map("subCategory")
}

model Comment {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  deletedAt     DateTime?      
  value         String          @db.VarChar(255)
  isAnonymous   Boolean         @default(false)
  username      String          @db.VarChar(255)
  password      String?         @db.VarChar(255)
  userId        String?         @db.VarChar(255)
  postId        Int
  post          Post            @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          User?           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentReply CommentReply[]

	@@map("comment")
}

model CommentReply {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  value       String    @db.VarChar(255)
  isAnonymous Boolean   @default(false)
  username    String    @db.VarChar(255)
  password    String?   @db.VarChar(255)
  userId      String?   @db.VarChar(255)
  commentId   String    @db.VarChar(255)
  user        User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

	@@map("commentReply")
}

model Notification {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  postId    Int
  commentId String    @db.VarChar(255)
  isRead    Boolean   @default(false)
  userId    String?   @db.VarChar(255)
  message   String    @db.VarChar(255)
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

	@@map("notification")
}

model Post {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  deletedAt     DateTime?      
  title         String          @db.VarChar(255)
  preview       String          @db.VarChar(255)
  readTime      Int
  content       String          
  view          Int             @default(0)
  isPrivate     Boolean         @default(false)
  categoryId    Int
  subCategoryId Int
  userId        String          @db.VarChar(255)
  like          Int             @default(0)
  thumbnail     String          
  comment       Comment[]
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  subCategory  SubCategory    @relation(fields: [subCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags Tag[]

	@@map("post")
}

model Tag {
  id            Int             @id @default(autoincrement())
  value         String          @db.VarChar(255)
  posts Post[]
	@@map("tag")
}

model User {
  id            String          @id  @default(uuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  deletedAt     DateTime?      
  profileImage  String          @db.VarChar(255)
  username      String          @db.VarChar(255) @unique
  email         String          @db.VarChar(255) @unique
  password      String          @db.VarChar(255)
  role          userRole       @default(member)
  comment       Comment[]
  commentReply CommentReply[]
  notification  Notification[]
  post          Post[]
	@@map("user")
}

model View {
  fullDate  String @id @unique
  year  Int
  month Int
  date  Int
  count Int
	@@map("view")
}
